#!/usr/bin/env node
require("babel/register"); // don't put anything above this line!

// parse command line
var nopt = require("nopt")
  , Stream = require("stream").Stream
  , path = require("path")
    , knownOpts = { "phrase" : [String, null]
                , "mem" : Number
                , "time" : Number
                , "cores" : Number
                , "file" : [String, Array]
                , "storm" : Boolean
                , "log" : Boolean
                , "improve" : Boolean
                }
  , shortHands = { "p" : ["--phrase"]
                 , "m" : ["--mem"]
                 , "t" : ["--time"]
                 , "c" : ["--cores"]
                 , "f" : ["--file"]
                 , "s" : ["--storm"]
                 , "l" : ["--log"]
                 , "i" : ["--improve"]
                 }
  , parsed = nopt(knownOpts, shortHands, process.argv, 2)

if(parsed.storm) {
	require("./storm.js")
	process.exit();
}

if(parsed.improve) {
  require("./improver.js")
  process.exit();
}

var fs = require('fs')
var model = require('./src/model'),
  Board = model.Board,
  Unit = model.Unit,
  Game = model.Game,
  TargetPlacementGenerator = model.TargetPlacementGenerator;

var read = require('./src/reader');
var pathfind = require('./src/pathfind');

var answer = [];


if(!parsed.file) {
  console.log('Specify file list with -f');
  process.exit();
}

parsed.file.forEach(function(fileName, i, arr) {
	data = fs.readFileSync(fileName);
  task = JSON.parse(data);

  var game = read(task);
  var initialBoardCells = JSON.parse(JSON.stringify(game.board.cells));
  //console.log(task.units.length);

  var encoding = {
          W : "p",
          E : "b",
          SW : "a",
          SE : "m",
          CW : "d",
          CCW : "k"
        };

  task.sourceSeeds.forEach(function(seed, i, arr) {
    var solution = "";
      game.board.cells = JSON.parse(JSON.stringify(initialBoardCells));
      var rand = game.board.getRandomGenerator(seed);

      for(var unitIndex = 0; unitIndex < task.sourceLength; unitIndex++) {
        var currentUnit = rand()%task.units.length;
        //console.log(currentUnit);

        var unit = new Unit(task.units[currentUnit].pivot, task.units[currentUnit].members);
        game.unit = game.spawn(game.board, unit);

        if(parsed.log) {
          game.display();
          console.log(" ");
        }

        // check for endgame
        if(!game.isValidPosition(game.board, game.unit))
          break;

        // Find best reachable position and path there
        var targetGenerator = new TargetPlacementGenerator(game.board, game.unit, 4);
        var unitDest = targetGenerator.next();
        while(1) {
          // using pathfinder

           if(parsed.log) {
             var tmp = game.unit;
             game.unit = unitDest;
             game.display();
             console.log("placement found");
             game.unit = tmp;
           }

          var path = pathfind(game.board, game.unit, game.unit.pivot, unitDest.pivot);
          // if(parsed.log) {
          //   console.log(path.commands);
          // }
          if(path.status == 'success')
            break;

          unitDest = targetGenerator.next();
        }

        // safe-trace returned path and generate answer sequence
        var failed = false;
        for(var i=0; i < path.commands.length; i++) {
          var dir = path.commands[i];

          //if(parsed.log) {
          //  console.log(" i=" + i + " of "+path.commands.length);
          //  console.log(dir);
          //}
          solution += encoding[dir];
          var moved = game.unit.move(dir);          
          if(game.isValidPosition(game.board, moved)) {
            game.unit = moved;
            
            // if(parsed.log) {
            //   game.display();
            //   console.log("valid move ");
            // }
          }
          else {
            failed = true;            
             if(parsed.log) {
               game.display();
               console.log("invalid move ");
             }
            break;
          }
        }
        // add locking step
        if(!failed)
          solution += 'a';

        if(parsed.log) {
           game.display();
           console.log(solution);
         }
         //solution += ' ';

        // apply unit and find score
        game.board.fillByUnit(game.unit);
        game.moveScoreCount(game);
        if(parsed.log) {
          console.log('Score so far: ', game.moveScoreGet());
        }
        game.board.clearLines();
        game.unit = undefined;

        if(parsed.log) {
          //game.display();
          //console.log(" ");
          console.log("unit completed");
        }
      }

    var t9 = require('./src/t9');
    var t9solution = t9(solution);

    //solution = solution.substring(0, solution.length-1);
    var entry = {
      problemId : task.id,
      seed : seed,
      tag : 'cw_v13_pathfind' + task.id,
      solution : t9solution
    };
    answer.push(entry);
  });
});
console.log(JSON.stringify(answer));
