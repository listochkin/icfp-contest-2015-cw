#!/usr/bin/env node
require("babel/register"); // don't put anything above this line!

// parse command line
var nopt = require("nopt")
  , Stream = require("stream").Stream
  , path = require("path")
  , knownOpts = { "phrase" : [String, null]
                , "mem" : Number
                , "time" : Number
                , "cores" : Number
                , "file" : [String, Array]
                , "storm" : Boolean
                , "log" : Boolean
                , "perflog" : Boolean
                , "depth" : Number // how deep to look for potential target unit positions
                , "improve" : Boolean
                , "suppress" : Boolean // suppress output of problem answer
                }
  , shortHands = { "p" : ["--phrase"]
                 , "m" : ["--mem"]
                 , "t" : ["--time"]
                 , "c" : ["--cores"]
                 , "f" : ["--file"]
                 , "s" : ["--storm"]
                 , "l" : ["--log"]
                 , "i" : ["--improve"]
                 , "e" : ["--perflog"]
                 , "d" : ["--depth"]
                 , "s" : ["--suppress"]
                 }
  , parsed = nopt(knownOpts, shortHands, process.argv, 2)

if(parsed.storm) {
	require("./storm.js")
	process.exit();
}

if(parsed.improve) {
  require("./improver.js")
  process.exit();
}

if(!parsed.file) {
  console.log('Specify file list with -f');
  process.exit();
}

var lookupDepth = parsed.depth || 1;

var solver = require('./solver');

var problems = parsed.file.map(function (fileName) {
  var fs = require('fs');
  var data = fs.readFileSync(fileName);
  var task = JSON.parse(data);
  return task;
});

var shouldLog = parsed.log;

// START
var startTime = new Date();
var results = solver(problems, lookupDepth, shouldLog);
var executionTime = new Date() - startTime;
// DONE

var answers = results.reduce(function (allAnswers, resultsForTask) {
  return allAnswers.concat(resultsForTask.map(function (r) {
    return r.answer;
  }));
}, []);
var seedScores = results.reduce(function (allSeedScores, resultsForTask) {
  return allSeedScores.concat(resultsForTask.map(function (r) {
    return r.seedScore;
  }));
}, []);

if (!parsed.suppress)
  console.log(JSON.stringify(answers));

if (parsed.perflog) {
  var sum = 0;
  for( var i = 0; i < seedScores.length; i++ ){
      sum += seedScores[i];
  }
  var avg = sum/seedScores.length;

  console.log('Lookup depth: ' + lookupDepth
    + ', Seed scores: ' + JSON.stringify(seedScores) + " Avg=" + avg
    + ', Execution time sec: ' + (executionTime / 1000));
}
