#!/usr/bin/env node
require("babel/register"); // don't put anything above this line!

// parse command line
var nopt = require("nopt")
  , Stream = require("stream").Stream
  , path = require("path")
    , knownOpts = { "phrase" : [String, null]
                , "mem" : Number
                , "time" : Number
                , "cores" : Number
                , "file" : [String, Array]
                , "storm" : Boolean
                }
  , shortHands = { "p" : ["--phrase"]
                 , "m" : ["--mem"]
                 , "t" : ["--time"]
                 , "c" : ["--cores"]
                 , "f" : ["--file"]
                 , "s" : ["--storm"]
                 }
  , parsed = nopt(knownOpts, shortHands, process.argv, 2)

if(parsed.storm) {
	require("./storm.js")
	process.exit();
}


if(!parsed.file) {
  console.log('Specify file list with -f');
  process.exit();
}

var fs = require('fs')
var model = require('./src/model'),
  Board = model.Board,
  Unit = model.Unit,
  Game = model.Game;
var read = require('./src/reader');

var answer = [];

parsed.file.forEach(function(fileName, i, arr) {
	data = fs.readFileSync(fileName);  
  task = JSON.parse(data);

  var game = read(task);
  var initialBoardCells = JSON.parse(JSON.stringify(game.board.cells));
  console.log(task.units.length);

  task.sourceSeeds.forEach(function(seed, i, arr) {
    var solution = "";
    game.board.cells = JSON.parse(JSON.stringify(initialBoardCells));
    var rand = game.board.getRandomGenerator(seed);

    for(var unitIndex = 0; unitIndex < task.sourceLength; unitIndex++) {
      var currentUnit = rand()%task.units.length;  
      console.log(currentUnit);

      var unit = new Unit(task.units[currentUnit].pivot, task.units[currentUnit].members);
      //console.log(unit);
      game.unit = game.spawn(game.board, unit);    

      game.display();

      // check for endgame
      if(!game.isValidPosition(game.board, game.unit))
        break;

      // TODO: solve problem here
      while(1) {

        var dir = Math.floor(Math.random() * (1 - 0 + 1)) + 0;

        var moved = game.unit.move(dir ? "SW" : "SE");
        solution += dir ? 'a' : 'm';
        if(game.isValidPosition(game.board, moved))
          game.unit = moved;
        else
          break;        
      }
      game.board.fillByUnit(game.unit);
      game.unit = undefined;
      game.display();
      console.log(" ");
    }

    var entry = {
      problemId : task.id,
      seed : seed,
      tag : 'cw_sln_stupid' + task.id,
      solution : solution
    };  
    answer.push(entry);

  });  
});

console.log(JSON.stringify(answer));