#!/usr/bin/env node
'use strict';
var startTime = Date.now();
require("babel/register"); // don't put anything above this line!

// parse command line
var nopt = require("nopt")
  , Stream = require("stream").Stream
  , path = require("path")
  , knownOpts = { "phrase" : [String, Array]
                , "mem" : Number
                , "time" : Number
                , "cores" : Number
                , "file" : [String, Array]
                , "log" : Boolean
                , "perflog" : Boolean
                , "depth" : Number // how deep to look for potential target unit positions
                , "threshold" : Number // what percentage of potential target unit positions queue to use
                , "improve" : Boolean
                , "suppress" : Boolean // suppress output of problem answer
                , "oneseed" : Boolean // calc only one seed
                }
  , shortHands = { "p" : ["--phrase"]
                 , "m" : ["--mem"]
                 , "t" : ["--time"]
                 , "c" : ["--cores"]
                 , "f" : ["--file"]
                 , "l" : ["--log"]
                 , "i" : ["--improve"]
                 , "e" : ["--perflog"]
                 , "d" : ["--depth"]
                 , "th" : ["--threshold"]
                 , "s" : ["--suppress"]
                 , "os" : ["--oneseed"]
                 }
  , parsed = nopt(knownOpts, shortHands, process.argv, 2)

if(parsed.storm) {
	require("./storm.js")
	process.exit();
}

if(parsed.improve) {
  require("./improver.js")
  process.exit();
}

var fs = require('fs')

if(!parsed.file) {
  console.log('Specify file list with -f');
  process.exit();
}

var lookupDepth = 10;
var lookupThreshold = 1;
if (parsed.depth) {
  lookupDepth = parsed.depth;
}
if(parsed.threshold) {
  lookupThreshold = parsed.threshold;
}

// +++++++++

var tasks = parsed.file.map(function (fileName) {
  var data = fs.readFileSync(fileName);
  return JSON.parse(data);
});


var solve = require('./solver');

var answer = [];
var seedScores = [];

var result = solve({
  tasks: tasks,
  powerPhrases: parsed.phrase,
  singleSeedRun: parsed.oneseed,
  lookupDepth: lookupDepth,
  lookupThreshold: lookupThreshold,
  logEanbled: parsed.log,
  perflogEnabled: parsed.perflog,
  startTime: startTime,
  timeLimit: parsed.time ? parsed.time * 1000 : null // time in seconds
});

answer = result.answer;
seedScores = result.seedScores;

// +++++++++

var executionTime = new Date() - startTime;

if (!parsed.suppress)
  console.log(JSON.stringify(answer));

if (parsed.perflog) {
  var scoresSum = 0;
  for( var i = 0; i < seedScores.length; i++ ) scoresSum += seedScores[i];
  var seedScoresAvg = seedScores.length ? scoresSum/seedScores.length : 0;

  console.log('Lookup depth: ' + lookupDepth
    + ', Seed scores: ' + JSON.stringify(seedScores) + " Avg: " + seedScoresAvg
    + ', Execution time sec: ' + (executionTime / 1000));
}
